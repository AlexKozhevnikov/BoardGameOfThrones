package com.alexeus.ai;

import com.alexeus.logic.enums.*;
import com.alexeus.logic.struct.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

/**
 * Created by alexeus on 03.01.2017.
 * Интерфейс игрока для общения с игрой
 */
public interface GotPlayerInterface {

    // Представиться
    void nameYourself();

    /* ***************************** Приказы ****************************** */
    /**
     * Расстановка приказов
     * @return Карта с парами область-приказ. Не обязательно указывать все приказы, можно даже вернуть пустую карту.
     */
    HashMap<Integer, Order> giveOrders();

    /**
     * Как использовать посыльного ворона при вскрытии приказов
     * @return Строку с описанием решения.
     *         "w" означает просмотр карты одичалых;
     *         Пара значений int x, int y означает замену приказа в области x на приказ с кодом y. Примеры: "2, 0", "54, 7".
     *         Всё остальное, включая пустую строку, означает отказ от использования ворона.
     */
    String useRaven();

    /**
     * Метод служит для оповещения игрока о верхней карте одичалых вследствие использования посыльного ворона
     * @param card Карта одичалых
     * @return true, если хотим оставить карту одичалых наверху, false - если хотим закопать
     */
    boolean leaveWildlingCardOnTop(WildlingCard card);

    // Розыгрыш приказов
    /**
     * Разыграть один свой приказ набега
     * @return вариант розыгрыша набега
     */
    RaidOrderPlayed playRaid();

    /*
     * Разыграть один свой приказ похода
     */
    MarchOrderPlayed playMarch();

    /**
     * Количество кораблей, которое хочешь оставить после захвата определённой области с портом
     * @param portArea номер области с захваченным портом
     * @return количество помилованных кораблей
     */
    int getNumCapturedShips(int portArea);

    /**
     * Разыграть свой приказ сбора власти со звездой
     * @param area номер области, где игрок поставил приказ сбора власти со звездой
     * @return Вариант сбора войск; если ни одного войска не собирается, то вместо этого собираются жетоны власти
     */
    MusterPlayed playConsolidatePowerS(int area);

    /**
     * Поддержать одну из воюющих сторон
     * @param battleInfo информация о сражении
     * @return сторона, которую поддерживает игрок
     */
    SideOfBattle sideToSupport(final BattleInfo battleInfo);

    // *************************** КАРТЫ ДОМА ********************************
    /**
     * Выбрать в бою нужную карту своего дома
     * @param battleInfo информация о сражении
     * @return номер карты, которую выбрал игрок в своей колоде
     */
    int playHouseCard(final BattleInfo battleInfo);

    /**
     * Использовать ли свойство карты "Тирион Ланнистер" во время боя
     * @return true, если использовать
     */
    boolean useTyrion(final BattleInfo battleInfo, final HouseCard opponentCard);

    /**
     * По какому из треков скидывать оппонента Дораном.
     * @return номер трека, по которому Доран сбрасывает оппонента
     */
    int chooseInfluenceTrackDoran(final BattleInfo battleInfo);

    /**
     * Использовать ли свойство карты "Эйерон Грейджой" в бою
     * @return true, если мы хотим заплатить 2 жетона и выбрать другую карту (оставив бомжа в сбросе)
     */
    boolean useAeron(final BattleInfo battleInfo);

    /**
     * Выбрать область, из которой удалить приказ Королевой Шипов после боя.
     * @param possibleVariants возможные варианты
     * @return номер области, из которой игрок хочет удалить приказ. Вернуть -1 для отмены
     */
    int chooseAreaQueenOfThorns(HashSet<Integer> possibleVariants);

    /**
     * Использовать ли валирийский меч в битве
     * @return true, если игрок хочет использовать валирийский меч в этой битве
     */
    boolean useSword(final BattleInfo battleInfo);

    /**
     * Выбор области для отступления
     * @param retreatingArmy отступающая армия
     * @param possibleAreas  множество из возможных вариантов
     * @return номер области для отступления
     */
    int chooseAreaToRetreat(final Army retreatingArmy, final HashSet<Integer> possibleAreas);

    /**
     * Выбор области, из которой удалить приказ Серсеей после боя
     * @return номер области, из которой игрок хочет удалить приказ. Вернуть -1 для отмены
     */
    int chooseAreaCerseiLannister(final HashSet<Integer> possibleAreas);

    /**
     * В какой области использовать свойство карты "Ренли Баратеон", если есть такая возможность
     * @param possibleAreas Возможные номера областей, в которых можно посвятить в рыцари
     * @return номер области карты, в которой посвятить пехотинца до рыцаря, или -1, если отказываемся
     */
    int areaToUseRenly(final HashSet<Integer> possibleAreas);

    /**
     * Выбор карты дома противника для сброса после боя, в котором был сыгран Пестряк
     * @param enemy номер дома, у которого можно сбросить карту
     * @return номер карты, которую выбрал игрок в колоде противника
     */
    int chooseCardPatchface(int enemy);

    /* ************************ События ***************************** */
    /**
     * Разыграть сбор войск в одном из своих замков
     * @param areas номера областей с замками, где игрок ещё не провёл сбор войск
     * @return Вариант сбора войск
     */
    MusterPlayed muster(HashSet<Integer> areas);

    /**
     * Отвечает, какое событие выбрать
     * @param deckNumber номер колоды событий, в которой нужно выбрать событие (от 0 до 2)
     * @return номер выбранного события (от 0 до 2)
     */
    int eventToChoose(int deckNumber);

    // ставки
    /**
     * Возвращает число жетонов власти, которое игрок ставит на торгах за треки влияния.
     * Допустимое значение - от 0 до текущего максимума числа жетонов.
     * @param track 0 - трек трона, 1 - трек вотчин, 2 - трек королевского двора
     * @return ставка игрока
     */
    int bid(int track);

    /**
     * Возвращает новую расстановку на треке влияния после того, как ставки были сделаны, если мы - король.
     * Недопустимо, чтобы в новом порядке
     * @param track номер трека влияния
     * @param bids  массив со ставками
     * @return новый порядок игроков на треке: индекс - место, значение - игрок на данном месте
     */
    int[] kingChoiceInfluenceTrack(int track, int[] bids);

    /**
     * Возвращает число жетонов власти, которое игрок ставит на ночной дозор.
     * @param strength сила одичалых
     * @return ставка игрока
     */
    int wildlingBid(int strength);

    // Королевские выборы
    /**
     * Возвращает номер дома, который признаётся высший или низшей ставкой при нашествии одичалых, если мы - король.
     * @param card       карта одичалых
     * @param pretenders список претендентов на звание высшей/низшей ставки
     * @param isBidTop   true, если высшая ставка, false, если низшая ставка
     * @return выбранный претендент
     */
    int kingChoiceWildlings(WildlingCard card, ArrayList<Integer> pretenders, boolean isBidTop);

    // Действия одичалых

    /**
     * Метод решает, каких юнитов распускать
     * @param reason причина роспуска войск
     * @return вариант роспуска войск
     */
    DisbandPlayed disband(DisbandReason reason);

    /**
     * Метод отвечает, в каких областях спешить рыцарей, если ты - прочая ставка при победе карты "Убийцы ворон"
     * @param numKnightsToDowngrade количество рыцарей, которых нужно спешить
     * @return список областей для спешивания рыцарей (размер должен равняться numKnightsToDowngrade)
     */
    UnitExecutionPlayed crowKillersLoseDecision(int numKnightsToDowngrade);

    /**
     * Метод отвечает, в каких областях убить рыцарей, если ты проиграл карты "Убийцы ворон".
     * Метод вызывается, только если игроку не хватает пехотинцев, чтобы спешить своих рыцарей.
     * @param numKnightsToKill минимальное количество рыцарей, которых нужно умертвить
     * @return список областей для умерщвления рыцарей
     */
    UnitExecutionPlayed crowKillersKillKnights(int numKnightsToKill);

    /**
     * Метод отвечает, в каких областях пехотинцев улучшить до рыцарей, если ты - высшая ставка
     * при победе над картой "Убийцы ворон"
     * @param numPawnsToUpgrade максимальное количество пехотинцев, которых можно улучшить
     * @return список областей для спешивания рыцарей (размер - не более двух)
     */
    UnitExecutionPlayed crowKillersTopDecision(int numPawnsToUpgrade);

    /**
     * Метод отвечает, какую карту сбрасывать, если ты - прочая ставка при победе карты "Сбор на молоководной"
     * @return номер карты Дома для сброса
     */
    int massingOnTheMilkwaterLoseDecision();

    /**
     * Метод отвечает, какую карту возвращать, если ты - высшая ставка при победе над картой "Наездники на мамонтах"
     * @return номер нарты Дома для возврата. Вернуть отрицательное число, если игрок не хочет возвращать карту.
     */
    int mammothRidersTopDecision();

    /**
     * Метод отвечает, по какому треку влияния подняться, если ты - высшая ставка
     * при победе над картой "Король за стеной"
     * @return номер трека влияния
     */
    TrackType aKingBeyondTheWallTopDecision();

    /**
     * Метод отвечает, по какому треку влияния опуститься, если ты - прочая ставка при победе карты "Король за стеной"
     * @return номер трека влияния
     */
    TrackType aKingBeyondTheWallLoseDecision();

    /**
     * Метод отвечает, по какому треку влияния опуститься, или какие войска распустить,
     * если ты - низшая ставка при победе карты "Передовой отряд"
     * @return ответ игрока: если это TrackType, то игрок решает спуститься по треку,
     *         если DisbandPlayed, то распустить войска.
     */
    Object preemptiveRaidBottomDecision();
}
